pentads_poly<-list()
for (i in nrow(coordinates)){
pentads_poly[[i]] <- sp::Polygons(list(
sp::Polygon( cbind(
c(coordinates[i,'lat'], coordinates[i,'lat']+0.2, coordinates[i,'lat']+0.2, coordinates[i,'lat'], coordinates[i,'lat']),
c(coordinates[i,'lon'], coordinates[i,'lon'], coordinates[i,'lon']+0.2, coordinates[i,'lon']+0.2, coordinates[i,'lon'])
))
), i)
i <- i + 1
}
pid <- sapply(slot(pentads_poly, "polygons"), function(x) slot(x, "ID"))
pentads_poly<-list()
for (i in nrow(coordinates)){
pentads_poly[[i]] <- sp::Polygons(list(
sp::Polygon( cbind(
c(coordinates[i,'lat'], coordinates[i,'lat']+0.2, coordinates[i,'lat']+0.2, coordinates[i,'lat'], coordinates[i,'lat']),
c(coordinates[i,'lon'], coordinates[i,'lon'], coordinates[i,'lon']+0.2, coordinates[i,'lon']+0.2, coordinates[i,'lon'])
))
), i)
i <- i + 1
}
pentads_poly <- sp::SpatialPolygons(pentads_poly)
pid <- sapply(slot(pentads_poly, "polygons"), function(x) slot(x, "ID"))
p.df <- data.frame( ID=1:length(pentads_poly), row.names = pid)
p <- sp::SpatialPolygonsDataFrame(pentads_poly, p.df)
p@data$pentad_name <- pentad_codes
pentads_poly<-list()
for (i in nrow(coordinates)){
pentads_poly[[i]] <- sp::Polygons(list(
sp::Polygon( cbind(
c(coordinates[i,'lat'], coordinates[i,'lat']+0.2, coordinates[i,'lat']+0.2, coordinates[i,'lat'], coordinates[i,'lat']),
c(coordinates[i,'lon'], coordinates[i,'lon'], coordinates[i,'lon']+0.2, coordinates[i,'lon']+0.2, coordinates[i,'lon'])
))
), i)
i <- i + 1
}
pentads_poly <- sp::SpatialPolygons(pentads_poly)
coordinates
View(coordinates)
coordinates <- data.frame(pentad_codes = pentad_codes) %>%
dplyr::mutate(letter = substr(pentad_codes, 5, 5)) %>%
dplyr::mutate(
lat = ifelse(
(letter == '_' || letter == 'a'),
-as.numeric(substr(pentad_codes, 1, 4)) / 100,
as.numeric(substr(pentad_codes, 1, 4)) / 100),
lon = ifelse(
(letter == 'a' || letter == 'b'),
-as.numeric(substr(pentad_codes, 6, 9)) / 100,
as.numeric(substr(pentad_codes, 6, 9)) / 100)
)
coordinates
coordinates %>%
dplyr::select(lat, lon)
pentads_poly<-list()
for (i in nrow(coordinates)){
pentads_poly[[i]] <- sp::Polygons(list(
sp::Polygon( cbind(
c(coordinates[i,'lat'], coordinates[i,'lat']+0.2, coordinates[i,'lat']+0.2, coordinates[i,'lat'], coordinates[i,'lat']),
c(coordinates[i,'lon'], coordinates[i,'lon'], coordinates[i,'lon']+0.2, coordinates[i,'lon']+0.2, coordinates[i,'lon'])
))
), i)
i <- i + 1
}
pentads_poly <- sp::SpatialPolygons(pentads_poly)
pentads_poly<-list()
for (i in nrow(coordinates)){
pentads_poly[[i]] <- sp::Polygons(list(
sp::Polygon( cbind(
c(coordinates[i,'lat'], coordinates[i,'lat']+0.2, coordinates[i,'lat']+0.2, coordinates[i,'lat'], coordinates[i,'lat']),
c(coordinates[i,'lon'], coordinates[i,'lon'], coordinates[i,'lon']+0.2, coordinates[i,'lon']+0.2, coordinates[i,'lon'])
))
), i)
}
pentads_poly <- sp::SpatialPolygons(pentads_poly)
nrow(coordinates)
pentads_poly<-list()
for (i in 1:nrow(coordinates)){
pentads_poly[[i]] <- sp::Polygons(list(
sp::Polygon( cbind(
c(coordinates[i,'lat'], coordinates[i,'lat']+0.2, coordinates[i,'lat']+0.2, coordinates[i,'lat'], coordinates[i,'lat']),
c(coordinates[i,'lon'], coordinates[i,'lon'], coordinates[i,'lon']+0.2, coordinates[i,'lon']+0.2, coordinates[i,'lon'])
))
), i)
}
pentads_poly <- sp::SpatialPolygons(pentads_poly)
pid <- sapply(slot(pentads_poly, "polygons"), function(x) slot(x, "ID"))
p.df <- data.frame( ID=1:length(pentads_poly), row.names = pid)
p <- sp::SpatialPolygonsDataFrame(pentads_poly, p.df)
p@data$pentad_name <- pentad_codes
p %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addPolygons(label = ~paste0(pentad_name))
find_pentad_coordinate(d$Pentad)
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad_coordinate.R")
find_pentad_coordinate(d$Pentad)
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad_coordinate.R")
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad_coordinate.R")
find_pentad_coordinate(d$Pentad)
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad_coordinates.R")
find_pentad_coordinates(d$Pentad)
d$Pentad
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad_coordinates.R")
find_pentad_coordinates(d$Pentad)
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad_coordinates.R")
find_pentad_coordinates(d$Pentad)
cbind(d,find_pentad_coordinates(d$Pentad))
cbind(d, find_pentad_coordinates(d$Pentad))
d<-cbind(d, find_pentad_coordinates(d$Pentad))
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad.R")
source("C:/Users/rnussba1/Documents/GitHub/rabm/r/find_pentad.R")
find_pentad(d)
find_pentad(d, plotting=TRUE)
d %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addPopups()
d %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addMarkers(lat=lat,lon=lon)
d
d %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addMarkers(lat=lat,lng=lon)
d$lat
d$lat+1
d$lat
d$lon
d %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addMarkers(lat=lat,lng=lon)
d %>%
leaflet::leaflet() %>%
leaflet::addTiles()
d %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addMarkers(lat=lat,lng=lon)
d %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addMarkers(lat=as.numeric(lat),lng=as.numeric(lon))
all.n <- extract_all(
start_date = '1900-01-01',
end_date = '2020-01-01',
region_type='group',
region_id='40147_NrthCst-KE'
)
all.s <- extract_all(
start_date = '1990-01-01',
end_date = '2020-01-01',
region_type='group',
region_id='40147_SthCst-KE'
)
p1 <- all.s %>%
mutate(julian = format(StartDate+(EndDate-StartDate),'%j')) %>%
# mutate(IsSpecie = Common_species == 'Mangrove' & Common_group == 'Kingfisher') %>%
mutate(IsSpecie = Common_species == 'Red-capped' & Common_group == 'Robin-chat') %>%
group_by(CardNo) %>%
summarise(count= sum(IsSpecie), julian=as.numeric(first(julian)))
p2 <- all.n %>%
mutate(julian = format(StartDate+(EndDate-StartDate),'%j')) %>%
# mutate(IsSpecie = Common_species == 'Mangrove' & Common_group == 'Kingfisher') %>%
mutate(IsSpecie = Common_species == 'Red-capped' & Common_group == 'Robin-chat') %>%
group_by(CardNo) %>%
summarise(count= sum(IsSpecie), julian=as.numeric(first(julian)))
ggplot(p1,aes(x=julian, y=count)) +
geom_point(colour = "red") +
geom_smooth(method = "gam", formula = y ~ s(x), method.args = list(family = "binomial"), alpha=1) +
geom_point(data=p2) +
geom_smooth(data=p2, method = "gam", formula = y ~ s(x), method.args = list(family = "binomial"), alpha=1)
all.n <- extract_all(
start_date = '1900-01-01',
end_date = '2020-01-01',
region_type='group',
region_id='40147_NrthCst-KE'
)
all.s <- extract_all(
start_date = '1990-01-01',
end_date = '2020-01-01',
region_type='group',
region_id='40147_SthCst-KE'
)
p1 <- all.s %>%
mutate(julian = format(StartDate+(EndDate-StartDate),'%j')) %>%
# mutate(IsSpecie = Common_species == 'Mangrove' & Common_group == 'Kingfisher') %>%
mutate(IsSpecie = Common_species == 'Red-capped' & Common_group == 'Robin-chat') %>%
group_by(CardNo) %>%
summarise(count= sum(IsSpecie), julian=as.numeric(first(julian)))
library(rabm)
library(dplyr) # to analyze some of the data pulled
library(ggplot2) # to to plot some of the data
library(lubridate) # for working with dates
library(tidyr)
library(rgdal)
library(leaflet)
library(rgeos)
p1 <- all.s %>%
mutate(julian = format(StartDate+(EndDate-StartDate),'%j')) %>%
# mutate(IsSpecie = Common_species == 'Mangrove' & Common_group == 'Kingfisher') %>%
mutate(IsSpecie = Common_species == 'Red-capped' & Common_group == 'Robin-chat') %>%
group_by(CardNo) %>%
summarise(count= sum(IsSpecie), julian=as.numeric(first(julian)))
p2 <- all.n %>%
mutate(julian = format(StartDate+(EndDate-StartDate),'%j')) %>%
# mutate(IsSpecie = Common_species == 'Mangrove' & Common_group == 'Kingfisher') %>%
mutate(IsSpecie = Common_species == 'Red-capped' & Common_group == 'Robin-chat') %>%
group_by(CardNo) %>%
summarise(count= sum(IsSpecie), julian=as.numeric(first(julian)))
ggplot(p1,aes(x=julian, y=count)) +
geom_point(colour = "red") +
geom_smooth(method = "gam", formula = y ~ s(x), method.args = list(family = "binomial"), alpha=1) +
geom_point(data=p2) +
geom_smooth(data=p2, method = "gam", formula = y ~ s(x), method.args = list(family = "binomial"), alpha=1)
ggplot(p1,aes(x=julian, y=count)) +
geom_point(colour = "red") +
geom_smooth(method = "gam", formula = y ~ s(x), method.args = list(family = "binomial"), alpha=1,colour = "red") +
geom_point(data=p2) +
geom_smooth(data=p2, method = "gam", formula = y ~ s(x), method.args = list(family = "binomial"), alpha=1)
p2
p2$count>0
sum(p2$count>0)
sum(p1$count>0)
# Load library
library(RODBC)
library(ggplot2)
library(tidyverse)
library(gam)
library(gridExtra)
library(RColorBrewer)
# Define path to access database file
access_db = 'C:/Users/rnussba1/Desktop/Ringing/Ringing/Data/0_ARK Ringing DB_2019-09-01.accdb'
# Create the connection
mdbConnect<-odbcConnectAccess2007(access_db)
# Visualize the table content
sqlTables(mdbConnect)
# Import Tables
SPE <- sqlFetch(mdbConnect, "Species2")
SES <- sqlFetch(mdbConnect, "Sessions")
LOC <- sqlFetch(mdbConnect, "Localities")
CAP <- sqlFetch(mdbConnect, "Captures")
# Combine datasets
d <- CAP %>%
left_join(SES, by = 'SessionID') %>%
left_join(LOC, by = 'LocalityID') %>%
left_join(SPE, by = c('SpeciesID' = 'Species#')) %>%
mutate(Julian = as.numeric(format(Date,'%j')), Year = as.numeric(format(Date,'%Y')), Month = as.numeric(format(Date,'%m')))
specie_name = 'Mangrove Kingfisher' #Mangrove Kingfisher Red-capped Robin Chat
# Filter for Watamu
locality = 17
dl <- d %>%
filter(LocalityID==locality) %>%
# mutate(lengthNet = Nets6m + Nets9m + Nets12m + Nets18m) %>%
mutate(Julian = as.numeric(format(Date,'%j')), Year = as.numeric(format(Date,'%Y')))
# Get Session data (Absence Data)
ds <- dl %>%
group_by(SessionID) %>%
mutate(Count = sum(CommonName==specie_name, na.rm = TRUE)) %>%
mutate(Count0 = sum(CommonName==specie_name & Age == 0, na.rm = TRUE)) %>%
mutate(CountAd = sum(CommonName==specie_name & Age != 0 & Age==4, na.rm = TRUE)) %>%
mutate(CountJuv = sum(CommonName==specie_name & Age != 0 & Age!=4, na.rm = TRUE)) %>%
select(SessionID, Date, Julian, Count, Year, CountAd, CountJuv, Count0) %>%
unique()
# Phenology
ggplot(ds) +
geom_point( aes( x=Julian , y=Count ) ) +
geom_smooth(aes( x=Julian , y=Count ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), ) +
ylim(0,max(ds$Count)) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"))
# RETRAP
dr <- dl %>%
filter(CommonName==specie_name ) %>%
arrange(Date) %>%
group_by(RingNo) %>%
mutate(n = 1,
retrap_i = cumsum(n)-1,
duration_capture = as.numeric(difftime(lead(Date),Date,units='days')),
isRetrap = lead(retrap_i)>retrap_i,
isRetrap = if_else(is.na(isRetrap),0, 1),
nextSeason = isRetrap & (duration_capture+Julian)>490,
Yearsince = Year-first(Year)) %>%
select(RingNo, Date, Year, Julian, retrap_i, isRetrap, nextSeason, duration_capture, Age, Yearsince) %>%
arrange(RingNo)
# Figure 2: Capture recapture
dr %>%
ggplot(aes(x=Julian, y=isRetrap)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x), method.args = list(family = "binomial")) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
## Figure 3: Capture recapture
dr %>%
filter(any(isRetrap==1)) %>%
ggplot( aes(x=Julian,y=RingNo)) +
geom_point(aes(colour = Age==4, size = Yearsince ))
dr %>%
filter(isRetrap==1) %>%
ggplot(aes(x=Julian, y=duration_capture)) +
geom_point(aes(color=nextSeason, size= Age==4)) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
specie_name = 'Red-capped Robin Chat' #Mangrove Kingfisher Red-capped Robin Chat
# Filter for Watamu
locality = 17
dl <- d %>%
filter(LocalityID==locality) %>%
# mutate(lengthNet = Nets6m + Nets9m + Nets12m + Nets18m) %>%
mutate(Julian = as.numeric(format(Date,'%j')), Year = as.numeric(format(Date,'%Y')))
ds <- dl %>%
group_by(SessionID) %>%
mutate(Count = sum(CommonName==specie_name, na.rm = TRUE)) %>%
mutate(Count0 = sum(CommonName==specie_name & Age == 0, na.rm = TRUE)) %>%
mutate(CountAd = sum(CommonName==specie_name & Age != 0 & Age==4, na.rm = TRUE)) %>%
mutate(CountJuv = sum(CommonName==specie_name & Age != 0 & Age!=4, na.rm = TRUE)) %>%
select(SessionID, Date, Julian, Count, Year, CountAd, CountJuv, Count0) %>%
unique()
o
# Phenology
ggplot(ds) +
geom_point( aes( x=Julian , y=Count ) ) +
geom_smooth(aes( x=Julian , y=Count ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), ) +
ylim(0,max(ds$Count)) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"))
# RETRAP
dr <- dl %>%
filter(CommonName==specie_name ) %>%
arrange(Date) %>%
group_by(RingNo) %>%
mutate(n = 1,
retrap_i = cumsum(n)-1,
duration_capture = as.numeric(difftime(lead(Date),Date,units='days')),
isRetrap = lead(retrap_i)>retrap_i,
isRetrap = if_else(is.na(isRetrap),0, 1),
nextSeason = isRetrap & (duration_capture+Julian)>490,
Yearsince = Year-first(Year)) %>%
select(RingNo, Date, Year, Julian, retrap_i, isRetrap, nextSeason, duration_capture, Age, Yearsince) %>%
arrange(RingNo)
# Figure 2: Capture recapture
dr %>%
ggplot(aes(x=Julian, y=isRetrap)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x), method.args = list(family = "binomial")) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
dr %>%
filter(isRetrap==1) %>%
ggplot(aes(x=Julian, y=duration_capture)) +
geom_point(aes(color=nextSeason, size= Age==4)) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
## Figure 3: Capture recapture
dr %>%
filter(any(isRetrap==1)) %>%
ggplot( aes(x=Julian,y=RingNo)) +
geom_point(aes(colour = Age==4, size = Yearsince ))
# Figure 1: Phenology per age
ggplot(ds) +
geom_point( aes( x=Julian , y=CountAd ) , color='blue' ) +
geom_smooth(aes( x=Julian , y=CountAd ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), color="blue") +
geom_point( aes( x=Julian , y=CountJuv ), color='red') +
geom_smooth(aes( x=Julian , y=CountJuv ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), color='red') +
ylim(0,max(cbind(ds$CountAd, ds$CountJuv))) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B")) +
labs(title='Number of Adult (blue) and juv (red)')
specie_name = 'Mangrove Kingfisher' #Mangrove Kingfisher Red-capped Robin Chat
# Filter for Watamu
locality = 17
dl <- d %>%
filter(LocalityID==locality) %>%
# mutate(lengthNet = Nets6m + Nets9m + Nets12m + Nets18m) %>%
mutate(Julian = as.numeric(format(Date,'%j')), Year = as.numeric(format(Date,'%Y')))
# Get Session data (Absence Data)
ds <- dl %>%
group_by(SessionID) %>%
mutate(Count = sum(CommonName==specie_name, na.rm = TRUE)) %>%
mutate(Count0 = sum(CommonName==specie_name & Age == 0, na.rm = TRUE)) %>%
mutate(CountAd = sum(CommonName==specie_name & Age != 0 & Age==4, na.rm = TRUE)) %>%
mutate(CountJuv = sum(CommonName==specie_name & Age != 0 & Age!=4, na.rm = TRUE)) %>%
select(SessionID, Date, Julian, Count, Year, CountAd, CountJuv, Count0) %>%
unique()
# RETRAP
dr <- dl %>%
filter(CommonName==specie_name ) %>%
arrange(Date) %>%
group_by(RingNo) %>%
mutate(n = 1,
retrap_i = cumsum(n)-1,
duration_capture = as.numeric(difftime(lead(Date),Date,units='days')),
isRetrap = lead(retrap_i)>retrap_i,
isRetrap = if_else(is.na(isRetrap),0, 1),
nextSeason = isRetrap & (duration_capture+Julian)>490,
Yearsince = Year-first(Year)) %>%
select(RingNo, Date, Year, Julian, retrap_i, isRetrap, nextSeason, duration_capture, Age, Yearsince) %>%
arrange(RingNo)
# Figure 2: Capture recapture
dr %>%
ggplot(aes(x=Julian, y=isRetrap)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x), method.args = list(family = "binomial")) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
dr %>%
filter(isRetrap==1) %>%
ggplot(aes(x=Julian, y=duration_capture)) +
geom_point(aes(color=nextSeason, size= Age==4)) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
dr %>%
filter(isRetrap==1) %>%
ggplot(aes(x=Julian, y=duration_capture)) +
geom_point(aes(color=nextSeason, size= Age==4)) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
# Figure 2: Capture recapture
dr %>%
ggplot(aes(x=Julian, y=isRetrap)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x), method.args = list(family = "binomial")) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
## Figure 3: Capture recapture
dr %>%
filter(any(isRetrap==1)) %>%
ggplot( aes(x=Julian,y=RingNo)) +
geom_point(aes(colour = Age==4, size = Yearsince ))
specie_name = 'Red-capped Robin Chat' #Mangrove Kingfisher Red-capped Robin Chat
# Filter for Watamu
locality = 17
dl <- d %>%
filter(LocalityID==locality) %>%
# mutate(lengthNet = Nets6m + Nets9m + Nets12m + Nets18m) %>%
mutate(Julian = as.numeric(format(Date,'%j')), Year = as.numeric(format(Date,'%Y')))
# Get Session data (Absence Data)
ds <- dl %>%
group_by(SessionID) %>%
mutate(Count = sum(CommonName==specie_name, na.rm = TRUE)) %>%
mutate(Count0 = sum(CommonName==specie_name & Age == 0, na.rm = TRUE)) %>%
mutate(CountAd = sum(CommonName==specie_name & Age != 0 & Age==4, na.rm = TRUE)) %>%
mutate(CountJuv = sum(CommonName==specie_name & Age != 0 & Age!=4, na.rm = TRUE)) %>%
select(SessionID, Date, Julian, Count, Year, CountAd, CountJuv, Count0) %>%
unique()
# Phenology
ggplot(ds) +
geom_point( aes( x=Julian , y=Count ) ) +
geom_smooth(aes( x=Julian , y=Count ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), ) +
ylim(0,max(ds$Count)) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"))
# RETRAP
dr <- dl %>%
filter(CommonName==specie_name ) %>%
arrange(Date) %>%
group_by(RingNo) %>%
mutate(n = 1,
retrap_i = cumsum(n)-1,
duration_capture = as.numeric(difftime(lead(Date),Date,units='days')),
isRetrap = lead(retrap_i)>retrap_i,
isRetrap = if_else(is.na(isRetrap),0, 1),
nextSeason = isRetrap & (duration_capture+Julian)>490,
Yearsince = Year-first(Year)) %>%
select(RingNo, Date, Year, Julian, retrap_i, isRetrap, nextSeason, duration_capture, Age, Yearsince) %>%
arrange(RingNo)
# Figure 2: Capture recapture
dr %>%
ggplot(aes(x=Julian, y=isRetrap)) +
geom_point() +
geom_smooth(method = "gam", formula = y ~ s(x), method.args = list(family = "binomial")) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
dr %>%
filter(isRetrap==1) %>%
ggplot(aes(x=Julian, y=duration_capture)) +
geom_point(aes(color=nextSeason, size= Age==4)) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B"),
limits = c(0,365))
# Figure 1: Phenology per age
ggplot(ds) +
geom_point( aes( x=Julian , y=CountAd ) , color='blue' ) +
geom_smooth(aes( x=Julian , y=CountAd ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), color="blue") +
geom_point( aes( x=Julian , y=CountJuv ), color='red') +
geom_smooth(aes( x=Julian , y=CountJuv ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), color='red') +
ylim(0,max(cbind(ds$CountAd, ds$CountJuv))) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B")) +
labs(title='Number of Adult (blue) and juv (red)')
# Figure 1: Phenology per age
ggplot(ds) +
geom_point( aes( x=Julian , y=CountAd ) , color='blue' ) +
geom_smooth(aes( x=Julian , y=CountAd ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), color="blue", alpha =1) +
geom_point( aes( x=Julian , y=CountJuv ), color='red') +
geom_smooth(aes( x=Julian , y=CountJuv ), method = "gam", formula = y ~ s(x), method.args = list(family = "poisson"), color='red', alpha =1) +
ylim(0,max(cbind(ds$CountAd, ds$CountJuv))) +
scale_x_continuous(breaks=as.numeric(format(ISOdate(2004,1:12,1),"%j")),
labels=format(ISOdate(2004,1:12,1),"%B")) +
labs(title='Number of Adult (blue) and juv (red)')
